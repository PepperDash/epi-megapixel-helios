/*******************************************************************************************
  SIMPL+ Module Information
  (Fill in comments below)
*******************************************************************************************/
/*******************************************************************************************
Dealer Name:   PepperDash Technology Corp.
Programmer:    Heath Volmer
Copyright:     2016, All Rights Reserved
********************************************************************************************,
Notice of Ownership and Copyright

The material in which this notice appears is the property of PepperDash Technology Corporation
which claims copyright under the laws of the United States of America in the entire body of
material and in all parts thereof, regardless of the use to which it is being put.  Any use,
in whole or in part, of this material by another party without the express written permission
of PepperDash Technology Corporation is prohibited.  

PepperDash Technology Corporation reserves all rights under applicable laws.
*******************************************************************************************/
/*******************************************************************************************
  Compiler Directives
  (Uncomment and declare compiler directives as needed)
*******************************************************************************************/
#CATEGORY "46" "PepperDash Technology"
#DEFAULT_VOLATILE
#ENABLE_STACK_CHECKING
#ENABLE_TRACE
#DIGITAL_EXPAND InputsWithOutputs
#ANALOG_SERIAL_EXPAND InputsWithOutputs

#DEFINE_CONSTANT MAX_LEN_ID				50
#DEFINE_CONSTANT MAX_LEN_STR			120
#DEFINE_CONSTANT JSON_SAVE_WAIT_TIME	500

#DEFINE_CONSTANT APPID_EXCLUDE			0
#DEFINE_CONSTANT APPID_INCLUDE			1

#HELP_BEGIN
Json To Simpl Master

These modules will allow the Simpl programmer to extract the values of arbitrary
JSON properties from a JSON file loaded onto the processor.  The programmer 
can set the "path" of the various Digital, Analog and String values they wish
to receive from the JSON and the respective outputs will show those values. 

This module is a "master", per-file module.  One or many child modules will 
attach to this module behind the scenes, using S#. For each JSON file to be used
in a program, one instance of this module is necessary.


PARAMETER:
-------------------------------------------------------------
UniqueIdParam(P)		The unique ID of this instance of the module.  Each insance
						of the module in SIMPL must have a unique ID.

JsonFilenameParam(P)	The parameter is used to define the JSON filename.  This value
						can be over-written using the JsonFilename string input.
                                               
INPUTS:	(changes to any input will cause reevaluation of data)
		(all string inputs typically driven by SIO, MSEND, etc.)
-------------------------------------------------------------
Initialize(D)	Registers the module with the Global JSON class

Load(D)			Loads the JSON file. JsonFilenameParam or JsonFilename must be set first

Save(D)			Saves the JSON file. This asks all child modules for the current values
				of their inputs and rewrites the file.

JsonFilename(S)	The path to the json file to read. Ex: 
				"\NVRAM\MyJson.txt".  String must be properly escaped.
				Wildcards are allowed in path, for example "\\NVRAM\\config_v1.*.json"
				will load the first file it finds with v1.*. NOTE: Files and master
				modules should be one-to-one.  Do not point two masters at the same
				file. Results are unpredictable.

OUTPUTS:
-------------------------------------------------------------
IsInitialized(D)	Latched signal notifying SIMPL that the module has been initialzied.
					Initialization only needs to happen once per program load.

JsonIsValid(D)		Will show high/low when JSON file is valid or not

Filename(s)			Output will be populated with the file name loaded without wildcards

FilePath(s)			Output will be populated with the file path 

UniqueId(S)			Output will be populated with the defined UniqueId parameter and must
					be linked to all associated child modules.

*Out(D/A/S)			The value of the JSON property corresponding to the Path input.
                                                             
VERSION NOTES:                                                             
-------------------------------------------------------------
v2.5.0, 2022-05-19, jkd
1. updated file operations for 4-Series per answer ID 1001247 - Crestron VC-4 File Handling



v2.4.3, 2020-06-10, jkd
1. Added JsonFilePathParam
2. Added IncludeAppIdPathParam
3. It is recommended to adhere to the following example when using the parameters.
- JsonFilePathParam: \\USER\\
- JsonFileNameParam: *Main_Config*.json
- IncludeAppIdPathParam: 1d, "Include App ID Path"
This will return: "\\USER\\programX\\*Main_Config*.json"
#HELP_END


/*******************************************************************************************
  Include Libraries
  (Uncomment and include additional libraries as needed)
*******************************************************************************************/
#USER_SIMPLSHARP_LIBRARY "PepperDash_Core"

/*******************************************************************************************
  DIGITAL, ANALOG and SERIAL INPUTS and OUTPUTS
  (Uncomment and declare inputs and outputs as needed)
*******************************************************************************************/
DIGITAL_INPUT
	_SKIP_,			// parameter: Unique ID
	_SKIP_,			// parameter: JsonFilePath
	_SKIP_,			// parameter: JsonFileName
	_SKIP_,			// parameter: Include program number in file path
	Initialize, 
	_SKIP_,
	Load,
	Save;

ANALOG_INPUT
	_SKIP_,
	_SKIP_,
	_SKIP_,
	_SKIP_,
	_SKIP_,
	_SKIP_,
	DebugLevel;
		
STRING_INPUT
	_SKIP_,
	JsonFileName[MAX_LEN_STR];
	
DIGITAL_OUTPUT	
	_SKIP_,			// parameter: Unique ID
	_SKIP_,			// parameter: JsonFilePath
	_SKIP_,			// parameter: JsonFileName
	_SKIP_,			// parameter: Include program number in file path
	IsInitialized,	// Initialize
	_SKIP_,
	JsonIsValid,	// Load
	_SKIP_,
	Is3Series,		// Save
	Is4Series,
	_SKIP_,
	IsAppliance,
	IsServer;

ANALOG_OUTPUT
	_SKIP_,
	ProgramNumber;	// DebugLevel

STRING_OUTPUT
	_SKIP_,
	RootDirectory,
	Filename,
	FilePath,
	RoomId,
	RoomName,
	UniqueId,
	_SKIP_,
	MessageToSimpl;

/*******************************************************************************************
  SIMPL # Class to be instantiated
*******************************************************************************************/
JsonToSimplFileMaster J2S;

/*******************************************************************************************
  Parameters
  (Uncomment and declare parameters as needed)
*******************************************************************************************/
STRING_PARAMETER 
	UniqueIdParam[MAX_LEN_ID],
	JsonFilePathParam[MAX_LEN_STR],
	JsonFileNameParam[MAX_LEN_STR];
	
INTEGER_PARAMETER
	IncludeAppIdPathParam;

/*******************************************************************************************
  Parameter Properties
  (Uncomment and declare parameter properties as needed)
*******************************************************************************************/
#BEGIN_PARAMETER_PROPERTIES UniqueIdParam
	propValidUnits			= unitString;
	propDefaultValue 		= "Master";
	propShortDescription	= "Unique ID for Master File";
#END_PARAMETER_PROPERTIES

#BEGIN_PARAMETER_PROPERTIES JsonFilePathParam
	propValidUnits			= unitString;
	propDefaultValue 		= "\\USER\\";
	propShortDescription	= "JSON file path";
#END_PARAMETER_PROPERTIES

#BEGIN_PARAMETER_PROPERTIES JsonFilenameParam
	propValidUnits			= unitString;
	propDefaultValue 		= "*.json";
	propShortDescription	= "JSON filename";
#END_PARAMETER_PROPERTIES

#BEGIN_PARAMETER_PROPERTIES IncludeAppIdPathParam
	propValidUnits			= unitDecimal;
	propDefaultValue 		= 1d;
	propList				= 	{ 0d, "Exclude App ID Path" },
								{ 1d, "Include App ID Path" };
	propShortDescription	= "Includes app ID in JsonFileNameParam";
#END_PARAMETER_PROPERTIES

/*******************************************************************************************
  Global Variables
  (Uncomment and declare global variables as needed)
  Note:  Be sure to initialize all declared STRING variables as needed
         For example, in Function Main: myString = "";
*******************************************************************************************/
INTEGER 
	nJsonSaveWaiting;

STRING
	strJsonFilePathAndName[MAX_LEN_STR];

/*******************************************************************************************
  Functions
  (Add any additional functions here)
  Note:  Functions must be physically placed before the location in
         the code that calls them.
*******************************************************************************************/
Function BuildFileNameAndPath(String strPath, String strName)
{
	CSwitch(IncludeAppIdPathParam)
	{
		// 0d = APPID_EXCLUDE
		Case(APPID_EXCLUDE):
		{
			MakeString(strJsonFilePathAndName,"%s%s", strPath, strName); 
			Break;
		}
		// 1d = APPID_INCLUDE
		Case(APPID_INCLUDE):
		{
			MakeString(strJsonFilePathAndName,"%sprogram%u\\%s", strPath, GetProgramNumber(), strName); 			
			Break;
		}
		Default:
		{
			If(DebugLevel > 0) Trace("BuildFileNameAndPath(%s, %s) Error:\rInvalid parameters\r", strPath, strName);				
			Break;
		}
	}
	
	ProgramNumber = GetProgramNumber();
	
	Trace("strJsonFilePathAndName: %s\r", strJsonFilePathAndName);
}

EventHandler BoolChanged(JsonToSimplMaster sender, BoolChangeEventArgs args)
{
	//Trace("[%s] BoolChanged: %u\n", GetSymbolInstanceName(), args.IntValue);
	
	// generic boolValue change (1)
	If(args.Type = JsonToSimplConstants.BoolValueChange)
 	{
 		//Output = args.IntValue;
 	}
 	Else If(args.Type = JsonToSimplConstants.JsonIsValidBoolChange)
 	{
 		JsonIsValid = args.IntValue;
 	}
 	Else If(args.Type = JsonToSimplConstants.ProgramCompatibility3SeriesChange)
 	{
		Is3Series = args.IntValue;
 	}
 	Else If(args.Type = JsonToSimplConstants.ProgramCompatibility4SeriesChange)
 	{
		Is4Series = args.IntValue;
 	}
 	Else If(args.Type = JsonToSimplConstants.DevicePlatformValueChange)
 	{ 		
		IsAppliance = (args.IntValue = 0);
		IsServer = (args.IntValue = 1);
 	}
}

EventHandler UshrtChanged(JsonToSimplMaster sender, UshrtChangeEventArgs args)
{
	//Trace("[%s] UshrtChanged: %u\n", GetSymbolInstanceName(), args.IntValue);
	
	// generic ushrtValue change (101)
 	If(args.Type = JsonToSimplConstants.UshortValueChange)
 	{		
 		//Output = args.IntValue;
 	} 	
}

EventHandler StringChanged(JsonToSimplMaster sender, StringChangeEventArgs args)
{
	//Trace("[%s] StringChanged: %s\n", GetSymbolInstanceName(), args.StringValue);
	
	// generic stringValue change (201)
	If(args.Type = JsonToSimplConstants.StringValueChange)
	{
		MessageToSimpl = args.StringValue;
	}
	Else If(args.Type = JsonToSimplConstants.FilenameResolvedChange)
	{
		Filename = args.StringValue;
	}
	Else If(args.Type = JsonToSimplConstants.FilePathResolvedChange)
	{
		FilePath = args.StringValue;
	}Else If(args.Type = JsonToSimplConstants.RootDirectoryChange)
	{
		RootDirectory = args.StringValue;
	}
	Else If(args.Type = JsonToSimplConstants.RoomIdChange)
	{
		RoomId = args.StringValue;	
	}
	Else If(args.Type = JsonToSimplConstants.RoomNameChange)
	{
		RoomName = args.StringValue;	
	}
}

/*******************************************************************************************
  Event Handlers
  (Uncomment and declare additional event handlers as needed)
*******************************************************************************************/
Push Initialize
{
 	If(IsInitialized = 1)
 		Return;
 	
 	J2S.Initialize(UniqueIdParam);
	RegisterEvent(J2S, BoolChange, BoolChanged);
	RegisterEvent(J2S, UshrtChange, UshrtChanged);
	RegisterEvent(J2S, StringChange, StringChanged);
	UniqueId = UniqueIdParam;
	
	IsInitialized = 1;
}

Push Load 
{	
	If(Len(strJsonFilePathAndName) = 0)
		Return;
	
 	J2S.EvaluateFile(strJsonFilePathAndName);
}

PUSH Save
{
	/*
		Logic wrapped around the J2S.Save() funciton
		acts as a debounce.  
		
		If there are several items triggering save, this
		will reduce the amount times save is triggered by
		delaying the save until the wait time has expired
	*/
	If(nJsonSaveWaiting = Off)
	{
		nJsonSaveWaiting = On;
		Wait(JSON_SAVE_WAIT_TIME, JsonSaveWait)
		{
			J2S.Save();
			nJsonSaveWaiting = Off;
		}
	}
	Else
	{
		RetimeWait(JSON_SAVE_WAIT_TIME, JsonSaveWait);
	}
}

Change DebugLevel
{
 	J2S.setDebugLevel(DebugLevel);
}

ThreadSafe Change JsonFilename
{
	If(Len(JsonFilename) = 0)
		Return;
		
 	BuildFileNameAndPath(JsonFilePathParam, JsonFileName);
}

/*******************************************************************************************
  Main()
  Uncomment and place one-time startup code here
  (This code will get called when the system starts up)
*******************************************************************************************/
Function Main()
{
   	WaitForInitializationComplete();
   
   	nJsonSaveWaiting = Off;
	BuildFileNameAndPath(JsonFilePathParam, JsonFileNameParam);
}
